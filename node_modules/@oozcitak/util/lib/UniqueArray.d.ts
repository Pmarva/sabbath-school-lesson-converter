/**
 * Represents a set of objects with an array backend.
 */
export declare class UniqueArray<T extends object> extends Array<T> {
    private _lookup;
    /**
     * Adds a new item to the set.
     *
     * @param item - an item
     */
    push(...items: T[]): number;
    /**
     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove.
     * @param items Elements to insert into the array in place of the deleted elements.
     */
    splice(start: number, deleteCount?: number, ...items: T[]): T[];
    /**
     * Adds a new item to the set.
     *
     * @param item - an item
     */
    add(item: T): this;
    /**
     * Removes an item from the set.
     *
     * @param item - an item
     */
    delete(item: T): boolean;
    /**
     * Determines if an item is in the set.
     *
     * @param item - an item
     */
    has(item: T): boolean;
    /**
     * Removes all items from the set.
     */
    clear(): void;
    /**
     * Gets the number of items in the set.
     */
    get size(): number;
}
